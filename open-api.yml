openapi: 3.0.0
servers:
  - description: Local Dev
    url: http://localhost:3000
info:
  title: Travel API
  description: Travel API tutorial
  version: "1.0.0"
  contact: 
    email: alex@alex.com
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.htm"
tags:
  - name: Travels
    description: Travels endpoints

paths:
  /v1/travels:
    get:
      tags:
        - Travels
      summary: List Travels
      operationId: listTravels
      description: An endpoint to list Travels
      responses:
        "200":
          description: Travels
          content:
            application/json:
              schema:
                required:
                  - travels
                properties:
                  travels:
                    type: array
                    items:
                      $ref: "#/components/schemas/Travel"
        default:
          $ref: "#/components/responses/DefaultError"
    post:
      tags:
        - Travels
      summary: Create Travel
      operationId: createTravel
      description: An endpoint to create Travel
      requestBody:
        description: Payload request to create Travel
        required: true
        $ref: "#/components/requestBodies/CreateTravelBody"
      responses:
        "201":
          description: Travel
          content:
            application/json:
              schema:
                required:
                  - travel
                properties:
                  travel:
                    $ref: "#/components/schemas/Travel"
        default:
          $ref: "#/components/responses/DefaultError"

  /v1/travels/{id}:
    get:
      tags:
        - Travels
      summary: Get Travel
      operationId: getTravel
      description: An endpoint to get a travel by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: UUID of the travel to get
      responses:
        "200":
          description: Travel
          content:
            application/json:
              schema:
                required:
                  - travel
                properties:
                  travel:
                    $ref: "#/components/schemas/Travel"
        default:
          $ref: "#/components/responses/DefaultError"
    put:
      tags:
        - Travels
      summary: Update Travel
      operationId: updateTravel
      description: An endpoint to update Travel
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: UUID of the travel to update
      requestBody:
        description: Payload request to update Travel
        required: true
        $ref: "#/components/requestBodies/UpdateTravelBody"
      responses:
        "200":
          description: Travel
          content:
            application/json:
              schema:
                required:
                  - travel
                properties:
                  travel:
                    $ref: "#/components/schemas/Travel"
        default:
          $ref: "#/components/responses/DefaultError"
    delete:
      tags:
        - Travels
      summary: Delete Travel
      operationId: deleteTravel
      description: An endpoint to delete a travel
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: UUID of the travel to get
      responses:
        "204":
          description: Travel successfully deleted
        default:
          $ref: "#/components/responses/DefaultError"  

  /v1/tours:
    get:
      tags:
        - Tours
      summary: List Tours
      operationId: listTours
      description: An endpoint to list Tours
      responses:
        "200":
          description: Tours
          content:
            application/json:
              schema:
                required:
                  - tours
                properties:
                  tours:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tour"
        default:
          $ref: "#/components/responses/DefaultError"

  /v1/tours/{tourId}:
    get:
      tags:
        - Tours
      summary: Get Tour
      operationId: getTour
      description: An endpoint to get a Tour by id
      parameters:
        - in: path
          name: tourId
          schema:
            type: string
          required: true
          description: UUID of the Tour to get
      responses:
        "200":
          description: Tour
          content:
            application/json:
              schema:
                required:
                  - tour
                properties:
                  tour:
                    $ref: "#/components/schemas/Tour"
        default:
          $ref: "#/components/responses/DefaultError"

          
components:
  responses:
    DefaultError:
      description: Default error response
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/DefaultError"
  schemas:
    DefaultError:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
          properties:
            message:
              type: string
              example: There was an error processing your request
            code:
              type: string
              example: ERR-NF
            errors:
              type: array
              items:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    example: "\"name\" is required"
    Travel:
      type: object
      required:
        - id
        - name
        - slug
        - number_of_days
        - tours
      properties:
        id:
          type: string
          example: 274f7f22-7285-4bd1-ac45-e646cfa3ad67
        name:
          type: string
          example: My Cool Travel
        description:
          type: string
          example: This is my cool Travel
        slug:
          type: string
          example: my-cool-travel
        number_of_days:
          type: number
          example: 3
        tours:
          type: array
          items:
            $ref: "#/components/schemas/Tour"
    Tour:
      type: object
      required:
        - id
        - travel_id
        - name
        - starting_date
        - ending_date
        - price
      properties:
        id:
          type: string
          example: c85946c0-df6d-4898-a9e4-6bf01b8dad43
        travel_id:
          type: string
          example: 274f7f22-7285-4bd1-ac45-e646cfa3ad67
        name:
          type: string
          example: Awesome Tour
        starting_date:
          type: string
          format: date
          example: "2023-04-08"
        ending_date:
          type: string
          format: date
          example: "2023-04-09"
        price:
          type: number
          example: 23.99
  requestBodies:
    CreateTravelBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - number_of_days
            properties:
              name:
                type: string
                example: My Cool Travel
              description:
                type: string
                example: This is my cool Travel
              number_of_days:
                type: number
                example: 3
              is_public:
                type: boolean
                example: true
    UpdateTravelBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: My Cool Travel
              description:
                type: string
                example: This is my cool Travel
              number_of_days:
                type: number
                example: 3
              is_public:
                type: boolean
                example: true







